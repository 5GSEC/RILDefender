--- /home/haohuang/backup/aosp11-RQ3A.211001.001/frameworks/opt/telephony/src/java/com/android/internal/telephony/gsm/GsmSMSDispatcher.java	2023-03-05 03:52:02.774060398 +0000
+++ /home/haohuang/aosp11-RQ3A.211001.001/frameworks/opt/telephony/src/java/com/android/internal/telephony/gsm/GsmSMSDispatcher.java	2023-03-05 22:06:36.883002599 +0000
@@ -43,6 +43,14 @@
 import java.util.HashMap;
 import java.util.concurrent.atomic.AtomicReference;
 
+import android.os.Binder;
+import android.content.Intent;
+import com.android.internal.telephony.util.ProcessUtil;
+import com.android.internal.telephony.RILDefender;
+import java.util.List;
+import java.util.ArrayList;
+
+
 public final class GsmSMSDispatcher extends SMSDispatcher {
     private static final String TAG = "GsmSMSDispatcher";
     protected UiccController mUiccController = null;
@@ -197,6 +205,97 @@
         HashMap<String, Object> map = tracker.getData();
         byte pdu[] = (byte[]) map.get("pdu");
         byte smsc[] = (byte[]) map.get("smsc");
+
+        // RILDefender Intercept SMS sent from suspecious sources
+        String content = (String) map.get("text");
+        String dest = (String) map.get("destAddr");
+
+        // add SMS to history
+        RILDefender.addSms(pdu);
+
+        // construct white list for valid SMS senders
+        List<String> smsAppName = RILDefender.getValidSources(mContext);
+
+        // obtain caller's PID and name
+        int callerPid = Binder.getCallingPid();
+        String callerName = ProcessUtil.getAppNameByPID(mContext, callerPid).trim();
+        Rlog.d(TAG, "sending SMS request received from pid = " + callerPid + " " + callerName);
+
+        // check source
+        boolean validSender = false;
+        if (callerName != null && smsAppName.contains(callerName)) {
+            validSender = true;
+            Rlog.d(TAG, "Valid sender = " + validSender);
+        }
+        else if (callerName.equals(RILDefender.proactive_sim_process)) {
+            // We distinguish proactive SIM SMS from malware SMS based on its from the internal telephony process
+            int blockSwitch = RILDefender.getSp(mContext, RILDefender.SP_NAME_PROACTIVE_SIM_SMS);
+            if (blockSwitch == RILDefender.AlertLevel.BLOCK_AND_NOTIFY.getValue()) {
+                // block and notify
+                Rlog.d(TAG, "Block proactive SIM SMS and notify user");
+                Intent intent = new Intent(RILDefender.BROADCAST_NOTIFY_ACTION);
+                intent.putExtra("type", RILDefender.SP_NAME_PROACTIVE_SIM_SMS);
+                intent.putExtra("source", callerName);
+                intent.putExtra("content", content);
+                intent.putExtra("dest", dest);
+                intent.putExtra("pdu", pdu);
+                tracker.onFailed(mContext, getNotInServiceError(mPhone.getServiceState().getState()), 0/*errorCode*/);
+                mContext.sendBroadcast(intent);
+                return;
+            }
+            else if (blockSwitch == RILDefender.AlertLevel.BLOCK.getValue()) {
+                // block without notify
+                Rlog.d(TAG, "Block proactive SIM SMS from " + callerName);
+                tracker.onFailed(mContext, getNotInServiceError(mPhone.getServiceState().getState()), 0/*errorCode*/);
+                return;
+            }
+            else if (blockSwitch == RILDefender.AlertLevel.NOTIFY.getValue()) {
+                // notify only
+                Rlog.d(TAG, "Notify user for the proactive SIM SMS");
+                Intent intent = new Intent(RILDefender.BROADCAST_NOTIFY_ACTION);
+                intent.putExtra("type", RILDefender.SP_NAME_PROACTIVE_SIM_SMS);
+                intent.putExtra("source", callerName);
+                intent.putExtra("content", content);
+                intent.putExtra("dest", dest);
+                intent.putExtra("pdu", pdu);
+                mContext.sendBroadcast(intent);
+            }
+        }
+        else {
+            // else consider it a malware SMS
+            int blockSwitch = RILDefender.getSp(mContext, RILDefender.SP_NAME_MALWARE_SMS);
+            if (blockSwitch == RILDefender.AlertLevel.BLOCK_AND_NOTIFY.getValue()) {
+                // block and notify
+                Rlog.d(TAG, "Block malware SMS and notify user");
+                Intent intent = new Intent(RILDefender.BROADCAST_NOTIFY_ACTION);
+                intent.putExtra("type", RILDefender.SP_NAME_MALWARE_SMS);
+                intent.putExtra("source", callerName);
+                intent.putExtra("content", content);
+                intent.putExtra("dest", dest);
+                intent.putExtra("pdu", pdu);
+                tracker.onFailed(mContext, getNotInServiceError(mPhone.getServiceState().getState()), 0/*errorCode*/);
+                mContext.sendBroadcast(intent);
+                return;
+            }
+            else if (blockSwitch == RILDefender.AlertLevel.BLOCK.getValue()) {
+                // block without notify
+                Rlog.d(TAG, "Block malware SMS from " + callerName);
+                tracker.onFailed(mContext, getNotInServiceError(mPhone.getServiceState().getState()), 0/*errorCode*/);
+                return;
+            }
+            else if (blockSwitch == RILDefender.AlertLevel.NOTIFY.getValue()) {
+                // notify only
+                Rlog.d(TAG, "Notify user for the malware SMS");
+                Intent intent = new Intent(RILDefender.BROADCAST_NOTIFY_ACTION);
+                intent.putExtra("type", RILDefender.SP_NAME_MALWARE_SMS);
+                intent.putExtra("source", callerName);
+                intent.putExtra("content", content);
+                intent.putExtra("dest", dest);
+                intent.putExtra("pdu", pdu);
+                mContext.sendBroadcast(intent);
+            }
+        }
+
         if (tracker.mRetryCount > 0) {
             // per TS 23.040 Section 9.2.3.6:  If TP-MTI SMS-SUBMIT (0x01) type
             //   TP-RD (bit 2) is 1 for retry
